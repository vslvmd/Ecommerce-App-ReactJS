{"ast":null,"code":"import axios from \"axios\";\nconst authApiURL = process.env.REACT_APP_AUTH_API_URL;\nexport const authLogin = async req => {\n  try {\n    // backend Fe do...\n    const {\n      email,\n      password\n    } = req; // login  post method\n\n    const {\n      data\n    } = await axios.get(authApiURL); // get all data dari DB\n    // backend actually do...\n\n    const user = data.filter(v => v.email === email && v.password === password) || []; //cek bila ada data yang sama\n\n    if (user.length > 0) return {\n      sucess: true,\n      code: 200,\n      status: \"success\",\n      data,\n      msg: \"login sukses\"\n    };\n    return {\n      success: false,\n      code: 404,\n      status: \"not found\",\n      data: null,\n      msg: \"User not found\"\n    };\n  } catch (e) {\n    return {\n      success: false,\n      code: 400,\n      status: \"error\",\n      data: null,\n      msg: \"Service Error\"\n    };\n  }\n};\nexport const authRegister = async req => {\n  try {\n    const {\n      email,\n      username\n    } = req;\n    const {\n      data\n    } = await axios.get(authApiURL); // get all data dari DB\n\n    const user = data.filter(v => v.email === email || v.username === username); // cek jika data ada\n    // backend do\n\n    if (user.length > 0) {\n      return {\n        code: 409,\n        status: \"conflict\",\n        msg: \"User already exist\"\n      };\n    } else {\n      await axios.post(authApiURL, req);\n      return {\n        success: false,\n        code: 200,\n        status: \"success\",\n        msg: \"register sukses\"\n      };\n    }\n  } catch (e) {\n    return {\n      success: false,\n      code: 400,\n      status: \"error\",\n      msg: \"Service Error\"\n    };\n  }\n};","map":{"version":3,"sources":["/Users/vasaamadea/Documents/mini_project_3/ecommerce-app/src/service/auth.js"],"names":["axios","authApiURL","process","env","REACT_APP_AUTH_API_URL","authLogin","req","email","password","data","get","user","filter","v","length","sucess","code","status","msg","success","e","authRegister","username","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAA/B;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAOC,GAAP,IAAe;AACtC,MAAI;AACF;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBF,GAA5B,CAFE,CAGF;;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAW,MAAMT,KAAK,CAACU,GAAN,CAAUT,UAAV,CAAvB,CAJE,CAI4C;AAE9C;;AACA,UAAMU,IAAI,GAAGF,IAAI,CAACG,MAAL,CAAYC,CAAC,IAAIA,CAAC,CAACN,KAAF,KAAYA,KAAZ,IAAqBM,CAAC,CAACL,QAAF,KAAeA,QAArD,KAAkE,EAA/E,CAPE,CAO+E;;AACjF,QAAIG,IAAI,CAACG,MAAL,GAAc,CAAlB,EAAqB,OAAO;AAAEC,MAAAA,MAAM,EAAE,IAAV;AAAgBC,MAAAA,IAAI,EAAE,GAAtB;AAA2BC,MAAAA,MAAM,EAAE,SAAnC;AAA8CR,MAAAA,IAA9C;AAAoDS,MAAAA,GAAG,EAAE;AAAzD,KAAP;AACrB,WAAO;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBH,MAAAA,IAAI,EAAE,GAAxB;AAA6BC,MAAAA,MAAM,EAAE,WAArC;AAAkDR,MAAAA,IAAI,EAAE,IAAxD;AAA8DS,MAAAA,GAAG,EAAE;AAAnE,KAAP;AACD,GAVD,CAUE,OAAOE,CAAP,EAAU;AACV,WAAO;AAAED,MAAAA,OAAO,EAAE,KAAX;AAAkBH,MAAAA,IAAI,EAAE,GAAxB;AAA6BC,MAAAA,MAAM,EAAE,OAArC;AAA8CR,MAAAA,IAAI,EAAE,IAApD;AAA0DS,MAAAA,GAAG,EAAE;AAA/D,KAAP;AACD;AACF,CAdM;AAgBP,OAAO,MAAMG,YAAY,GAAG,MAAOf,GAAP,IAAe;AACzC,MAAI;AACF,UAAM;AAAEC,MAAAA,KAAF;AAASe,MAAAA;AAAT,QAAsBhB,GAA5B;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAW,MAAMT,KAAK,CAACU,GAAN,CAAUT,UAAV,CAAvB,CAFE,CAE4C;;AAC9C,UAAMU,IAAI,GAAGF,IAAI,CAACG,MAAL,CAAYC,CAAC,IAAIA,CAAC,CAACN,KAAF,KAAYA,KAAZ,IAAqBM,CAAC,CAACS,QAAF,KAAeA,QAArD,CAAb,CAHE,CAG4E;AAE9E;;AACA,QAAIX,IAAI,CAACG,MAAL,GAAc,CAAlB,EAAqB;AACnB,aAAO;AAAEE,QAAAA,IAAI,EAAE,GAAR;AAAaC,QAAAA,MAAM,EAAE,UAArB;AAAiCC,QAAAA,GAAG,EAAE;AAAtC,OAAP;AACD,KAFD,MAEO;AACL,YAAMlB,KAAK,CAACuB,IAAN,CAAWtB,UAAX,EAAuBK,GAAvB,CAAN;AACA,aAAO;AAAGa,QAAAA,OAAO,EAAE,KAAZ;AAAmBH,QAAAA,IAAI,EAAE,GAAzB;AAA8BC,QAAAA,MAAM,EAAE,SAAtC;AAAiDC,QAAAA,GAAG,EAAE;AAAtD,OAAP;AACD;AACF,GAZD,CAYE,OAAOE,CAAP,EAAU;AACV,WAAO;AAAED,MAAAA,OAAO,EAAE,KAAX;AAAkBH,MAAAA,IAAI,EAAE,GAAxB;AAA6BC,MAAAA,MAAM,EAAE,OAArC;AAA8CC,MAAAA,GAAG,EAAE;AAAnD,KAAP;AACD;AACF,CAhBM","sourcesContent":["import axios from \"axios\"\n\n\nconst authApiURL = process.env.REACT_APP_AUTH_API_URL;\n\nexport const authLogin = async (req) => {\n  try {\n    // backend Fe do...\n    const { email, password } = req\n    // login  post method\n    const { data } = await axios.get(authApiURL)  // get all data dari DB\n\n    // backend actually do...\n    const user = data.filter(v => v.email === email && v.password === password) || []//cek bila ada data yang sama\n    if (user.length > 0) return { sucess: true, code: 200, status: \"success\", data, msg: \"login sukses\" }\n    return { success: false, code: 404, status: \"not found\", data: null, msg: \"User not found\" }\n  } catch (e) {\n    return { success: false, code: 400, status: \"error\", data: null, msg: \"Service Error\" }\n  }\n}\n\nexport const authRegister = async (req) => {\n  try {\n    const { email, username } = req\n    const { data } = await axios.get(authApiURL)  // get all data dari DB\n    const user = data.filter(v => v.email === email || v.username === username)   // cek jika data ada\n\n    // backend do\n    if (user.length > 0) {\n      return { code: 409, status: \"conflict\", msg: \"User already exist\" }\n    } else {\n      await axios.post(authApiURL, req);\n      return {  success: false, code: 200, status: \"success\", msg: \"register sukses\" }\n    }\n  } catch (e) {\n    return { success: false, code: 400, status: \"error\", msg: \"Service Error\" }\n  }\n}"]},"metadata":{},"sourceType":"module"}